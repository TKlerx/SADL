/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package treba;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;

import utils.LibraryChecker;

public class trebaJNI {

	private static boolean libraryLoaded = false;

	static {
		try {
			Path p = null;
			if (LibraryChecker.trebaDepsInstalled()) {
				p = Paths.get("./native_libs/libtreba.so");
				if (Files.notExists(p)) {
					p = findLibrary();
				}
				// } else if (osName.equalsIgnoreCase("Windows")) {
				// System.err.println("current OS (" + osName + ") not
				// supported");
				// System.exit(1);
				if (p == null) {
					System.err.println(
							"Did not load the treba library (libtreba.so). You cannot use full functionality until library is loaded!");
				} else {
					loadLibrary(p);
				}
			} else {
				// System.err.println("current OS (" + osName + ") not
				// supported");
				// p = Paths.get("");
				System.err.println(
						"Did not load the treba library (libtreba.so). You cannot use full functionality until library is loaded!");
			}
		} catch (final UnsatisfiedLinkError | IOException e) {
			System.err.println("Native code library failed to load. \n" + e);
			System.exit(1);
		}
	}

	public static boolean isLibraryLoaded() {
		return libraryLoaded;
	}

	protected static Path findLibrary() throws IOException {
		final Path rootDir = Paths.get(".");
		final Optional<Path> opt = Files.find(rootDir, 10, (p, attr) -> p.getFileName().toString().startsWith("treba")
				&& p.getFileName().toString().endsWith(".so")).findFirst();
		if (opt.isPresent()) {
			// System.out.println(rootDir.resolve(opt.get()).normalize().toAbsolutePath());
			return rootDir.resolve(opt.get());
		} else {
			System.err.println("Could not find treba library from rootDir " + rootDir.toAbsolutePath());
			return null;
		}
	}

	public static void loadLibrary(final Path p) {
		try {
			System.load(p.toAbsolutePath().normalize().toString());
			System.out.println("Loaded treba library.");
			libraryLoaded = true;
		} catch (final UnsatisfiedLinkError e) {
			System.err.println("Native code library failed to load from path " + p + ". \n" + e);
			throw e;
		}
	}

	public final static native int LIKELIHOOD_FORWARD_get();

	public final static native int LIKELIHOOD_BACKWARD_get();

	public final static native int LIKELIHOOD_VITERBI_get();

	public final static native int DECODE_FORWARD_get();

	public final static native int DECODE_BACKWARD_get();

	public final static native int DECODE_VITERBI_get();

	public final static native int DECODE_FORWARD_PROB_get();

	public final static native int DECODE_BACKWARD_PROB_get();

	public final static native int DECODE_VITERBI_PROB_get();

	public final static native int TRAIN_BAUM_WELCH_get();

	public final static native int TRAIN_DA_BAUM_WELCH_get();

	public final static native int TRAIN_VITERBI_get();

	public final static native int TRAIN_VITERBI_BW_get();

	public final static native int TRAIN_VARIATIONAL_BAYES_get();

	public final static native int TRAIN_GIBBS_SAMPLING_get();

	public final static native int TRAIN_MERGE_get();

	public final static native int TRAIN_MDI_get();

	public final static native int GENERATE_WORDS_get();

	public final static native int MERGE_TEST_ALERGIA_get();

	public final static native int MERGE_TEST_CHISQUARED_get();

	public final static native int MERGE_TEST_LR_get();

	public final static native int MERGE_TEST_BINOMIAL_get();

	public final static native int MERGE_TEST_EXACT_M_get();

	public final static native int MERGE_TEST_EXACT_B_get();

	public final static native int GENERATE_NONDETERMINISTIC_get();

	public final static native int GENERATE_DETERMINISTIC_get();

	public final static native int GENERATE_UNIFORM_get();

	public final static native int GENERATE_BAKIS_get();

	public final static native int SMRONE_REAL_get();

	public final static native int FORMAT_REAL_get();

	public final static native int FORMAT_LOG10_get();

	public final static native int FORMAT_LOG2_get();

	public final static native int FORMAT_LN_get();

	public final static native int FORMAT_NLOG10_get();

	public final static native int FORMAT_NLOG2_get();

	public final static native int FORMAT_NLN_get();

	public final static native void fsm_counts_set(long jarg1);

	public final static native long fsm_counts_get();

	public final static native void fsm_totalcounts_set(long jarg1);

	public final static native long fsm_totalcounts_get();

	public final static native void fsm_finalcounts_set(long jarg1);

	public final static native long fsm_finalcounts_get();

	public final static native void fsm_counts_spin_set(long jarg1);

	public final static native long fsm_counts_spin_get();

	public final static native void hmm_counts_trans_set(long jarg1);

	public final static native long hmm_counts_trans_get();

	public final static native void hmm_counts_emit_set(long jarg1);

	public final static native long hmm_counts_emit_get();

	public final static native void hmm_totalcounts_trans_set(long jarg1);

	public final static native long hmm_totalcounts_trans_get();

	public final static native void hmm_totalcounts_emit_set(long jarg1);

	public final static native long hmm_totalcounts_emit_get();

	public final static native void hmm_counts_spin_set(long jarg1);

	public final static native long hmm_counts_spin_get();

	public final static native void thread_args_trellis_set(long jarg1, thread_args jarg1_, long jarg2, trellis jarg2_);

	public final static native long thread_args_trellis_get(long jarg1, thread_args jarg1_);

	public final static native void thread_args_obsarray_set(long jarg1, thread_args jarg1_, long jarg2);

	public final static native long thread_args_obsarray_get(long jarg1, thread_args jarg1_);

	public final static native void thread_args_minobs_set(long jarg1, thread_args jarg1_, int jarg2);

	public final static native int thread_args_minobs_get(long jarg1, thread_args jarg1_);

	public final static native void thread_args_maxobs_set(long jarg1, thread_args jarg1_, int jarg2);

	public final static native int thread_args_maxobs_get(long jarg1, thread_args jarg1_);

	public final static native void thread_args_fsmhmm_set(long jarg1, thread_args jarg1_, long jarg2);

	public final static native long thread_args_fsmhmm_get(long jarg1, thread_args jarg1_);

	public final static native void thread_args_beta_set(long jarg1, thread_args jarg1_, double jarg2);

	public final static native double thread_args_beta_get(long jarg1, thread_args jarg1_);

	public final static native long new_thread_args();

	public final static native void delete_thread_args(long jarg1);

	public final static native void g_obsarray_set(long jarg1, observations jarg1_);

	public final static native long g_obsarray_get();

	public final static native void wfsa_num_states_set(long jarg1, wfsa jarg1_, int jarg2);

	public final static native int wfsa_num_states_get(long jarg1, wfsa jarg1_);

	public final static native void wfsa_alphabet_size_set(long jarg1, wfsa jarg1_, int jarg2);

	public final static native int wfsa_alphabet_size_get(long jarg1, wfsa jarg1_);

	public final static native void wfsa_state_table_set(long jarg1, wfsa jarg1_, long jarg2);

	public final static native long wfsa_state_table_get(long jarg1, wfsa jarg1_);

	public final static native void wfsa_final_table_set(long jarg1, wfsa jarg1_, long jarg2);

	public final static native long wfsa_final_table_get(long jarg1, wfsa jarg1_);

	public final static native long new_wfsa();

	public final static native void delete_wfsa(long jarg1);

	public final static native void hmm_num_states_set(long jarg1, hmm jarg1_, int jarg2);

	public final static native int hmm_num_states_get(long jarg1, hmm jarg1_);

	public final static native void hmm_alphabet_size_set(long jarg1, hmm jarg1_, int jarg2);

	public final static native int hmm_alphabet_size_get(long jarg1, hmm jarg1_);

	public final static native void hmm_transition_table_set(long jarg1, hmm jarg1_, long jarg2);

	public final static native long hmm_transition_table_get(long jarg1, hmm jarg1_);

	public final static native void hmm_emission_table_set(long jarg1, hmm jarg1_, long jarg2);

	public final static native long hmm_emission_table_get(long jarg1, hmm jarg1_);

	public final static native long new_hmm();

	public final static native void delete_hmm(long jarg1);

	public final static native void observations_size_set(long jarg1, observations jarg1_, int jarg2);

	public final static native int observations_size_get(long jarg1, observations jarg1_);

	public final static native void observations_data_set(long jarg1, observations jarg1_, long jarg2);

	public final static native long observations_data_get(long jarg1, observations jarg1_);

	public final static native void observations_occurrences_set(long jarg1, observations jarg1_, int jarg2);

	public final static native int observations_occurrences_get(long jarg1, observations jarg1_);

	public final static native void observations_next_set(long jarg1, observations jarg1_, long jarg2,
			observations jarg2_);

	public final static native long observations_next_get(long jarg1, observations jarg1_);

	public final static native long new_observations();

	public final static native void delete_observations(long jarg1);

	public final static native void trellis_fp_set(long jarg1, trellis jarg1_, double jarg2);

	public final static native double trellis_fp_get(long jarg1, trellis jarg1_);

	public final static native void trellis_bp_set(long jarg1, trellis jarg1_, double jarg2);

	public final static native double trellis_bp_get(long jarg1, trellis jarg1_);

	public final static native void trellis_backstate_set(long jarg1, trellis jarg1_, int jarg2);

	public final static native int trellis_backstate_get(long jarg1, trellis jarg1_);

	public final static native long new_trellis();

	public final static native void delete_trellis(long jarg1);

	public final static native double output_convert(double jarg1);

	public final static native double input_convert(double jarg1);

	public final static native String file_to_mem(String jarg1);

	public final static native int char_in_array(char jarg1, String jarg2);

	public final static native int line_count_elements(long jarg1);

	public final static native String line_to_int_array(String jarg1, long jarg2, long jarg3);

	public final static native void hmm_print(long jarg1, hmm jarg1_);

	public final static native long hmm_init(int jarg1, int jarg2);

	public final static native void hmm_destroy(long jarg1, hmm jarg1_);

	public final static native void hmm_randomize(long jarg1, hmm jarg1_, int jarg2, int jarg3);

	public final static native void hmm_to_log2(long jarg1, hmm jarg1_);

	public final static native long hmm_read_file(String jarg1);

	public final static native double train_viterbi_bw_hmm(long jarg1, hmm jarg1_, long jarg2, observations jarg2_);

	public final static native double train_viterbi_hmm(long jarg1, hmm jarg1_, long jarg2, observations jarg2_,
			int jarg3, double jarg4);

	public final static native void viterbi_hmm(long jarg1, hmm jarg1_, long jarg2, observations jarg2_, int jarg3);

	public final static native void generate_words_hmm(long jarg1, hmm jarg1_, int jarg2);

	public final static native double train_bw_hmm(long jarg1, hmm jarg1_, long jarg2, observations jarg2_, int jarg3,
			double jarg4);

	public final static native void gibbs_state_chain_state_set(long jarg1, gibbs_state_chain jarg1_, int jarg2);

	public final static native int gibbs_state_chain_state_get(long jarg1, gibbs_state_chain jarg1_);

	public final static native void gibbs_state_chain_sym_set(long jarg1, gibbs_state_chain jarg1_, int jarg2);

	public final static native int gibbs_state_chain_sym_get(long jarg1, gibbs_state_chain jarg1_);

	public final static native long new_gibbs_state_chain();

	public final static native void delete_gibbs_state_chain(long jarg1);

	public final static native double gibbs_sampler_fsm(long jarg1, wfsa jarg1_, long jarg2, observations jarg2_,
			double jarg3, int jarg4, int jarg5, int jarg6, int jarg7);

	public final static native double gibbs_sampler_hmm(long jarg1, hmm jarg1_, long jarg2, observations jarg2_,
			double jarg3, double jarg4, int jarg5, int jarg6, int jarg7, int jarg8);

	public final static native long gibbs_counts_to_hmm(long jarg1, hmm jarg1_, long jarg2, long jarg3, long jarg4,
			int jarg5, int jarg6, double jarg7, double jarg8);

	public final static native long gibbs_counts_to_wfsa(long jarg1, wfsa jarg1_, long jarg2, long jarg3, int jarg4,
			int jarg5, double jarg6, double jarg7);

	public final static native long gibbs_init_fsm(long jarg1, observations jarg1_, int jarg2, int jarg3, long jarg4);

	public final static native long gibbs_init_hmm(long jarg1, observations jarg1_, int jarg2, int jarg3, long jarg4);

	public final static native void interrupt_sigproc();

	public final static native void spinlock_lock(long jarg1);

	public final static native void spinlock_unlock(long jarg1);

	public final static native double rand_double();

	public final static native int rand_int_range(int jarg1, int jarg2);

	public final static native long wfsa_read_file(String jarg1);

	public final static native void wfsa_print(long jarg1, wfsa jarg1_);

	public final static native void wfsa_to_file(long jarg1, wfsa jarg1_, String jarg2);

	public final static native void wfsa_randomize_deterministic(long jarg1, wfsa jarg1_, int jarg2);

	public final static native void wfsa_randomize_nondeterministic(long jarg1, wfsa jarg1_, int jarg2, int jarg3);

	public final static native long wfsa_init(int jarg1, int jarg2);

	public final static native long wfsa_copy(long jarg1, wfsa jarg1_);

	public final static native void wfsa_destroy(long jarg1, wfsa jarg1_);

	public final static native void wfsa_to_log2(long jarg1, wfsa jarg1_);

	public final static native double wfsa_sum_prob(long jarg1, wfsa jarg1_, int jarg2);

	public final static native int wfsa_random_transition(long jarg1, wfsa jarg1_, int jarg2, long jarg3, long jarg4);

	public final static native void generate_words(long jarg1, wfsa jarg1_, int jarg2);

	public final static native int obssortcmp(long jarg1, long jarg2);

	public final static native int observations_alphabet_size(long jarg1, observations jarg1_);

	public final static native long observations_to_array(long jarg1, observations jarg1_, long jarg2);

	public final static native long observations_uniq(long jarg1, observations jarg1_);

	public final static native long observations_sort(long jarg1, observations jarg1_);

	public final static native void observations_destroy(long jarg1, observations jarg1_);

	public final static native long observations_read(String jarg1);

	public final static native double loglikelihood_all_observations_fsm(long jarg1, wfsa jarg1_, long jarg2,
			observations jarg2_);

	public final static native double loglikelihood_all_observations_hmm(long jarg1, hmm jarg1_, long jarg2,
			observations jarg2_);

	public final static native double trellis_backward(long jarg1, trellis jarg1_, long jarg2, int jarg3, long jarg4,
			wfsa jarg4_);

	public final static native double trellis_viterbi(long jarg1, trellis jarg1_, long jarg2, int jarg3, long jarg4,
			wfsa jarg4_);

	public final static native double trellis_forward_fsm(long jarg1, trellis jarg1_, long jarg2, int jarg3, long jarg4,
			wfsa jarg4_);

	public final static native double trellis_forward_hmm(long jarg1, trellis jarg1_, long jarg2, int jarg3, long jarg4,
			hmm jarg4_);

	public final static native long trellis_init(long jarg1, observations jarg1_, int jarg2);

	public final static native void trellis_print(long jarg1, trellis jarg1_, long jarg2, wfsa jarg2_, int jarg3);

	public final static native void forward_print_path(long jarg1, trellis jarg1_, long jarg2, wfsa jarg2_, int jarg3);

	public final static native void backward_print_path(long jarg1, trellis jarg1_, long jarg2, wfsa jarg2_, int jarg3);

	public final static native void viterbi_print_path(long jarg1, trellis jarg1_, long jarg2, wfsa jarg2_, int jarg3);

	public final static native void viterbi(long jarg1, wfsa jarg1_, long jarg2, observations jarg2_, int jarg3);

	public final static native void forward_fsm(long jarg1, wfsa jarg1_, long jarg2, observations jarg2_, int jarg3);

	public final static native void forward_fsm_to_file(long jarg1, wfsa jarg1_, long jarg2, observations jarg2_,
			int jarg3, String jarg4);

	public final static native void forward_hmm(long jarg1, hmm jarg1_, long jarg2, observations jarg2_, int jarg3);

	public final static native void backward_fsm(long jarg1, wfsa jarg1_, long jarg2, observations jarg2_, int jarg3);

	public final static native void backward_hmm(long jarg1, hmm jarg1_, long jarg2, observations jarg2_, int jarg3);

	public final static native double train_viterbi(long jarg1, wfsa jarg1_, long jarg2, observations jarg2_, int jarg3,
			double jarg4);

	public final static native double train_baum_welch(long jarg1, wfsa jarg1_, long jarg2, observations jarg2_,
			int jarg3, double jarg4, int jarg5);

	public final static native double train_bw(long jarg1, wfsa jarg1_, long jarg2, observations jarg2_, int jarg3,
			double jarg4);

	public final static native double train_viterbi_bw(long jarg1, wfsa jarg1_, long jarg2, observations jarg2_);

	public final static native long trellis_fill_bw(long jarg1);

	public final static native int main(int jarg1, long jarg2);

	public final static native void dffa_num_states_set(long jarg1, dffa jarg1_, int jarg2);

	public final static native int dffa_num_states_get(long jarg1, dffa jarg1_);

	public final static native void dffa_alphabet_size_set(long jarg1, dffa jarg1_, int jarg2);

	public final static native int dffa_alphabet_size_get(long jarg1, dffa jarg1_);

	public final static native void dffa_transitions_set(long jarg1, dffa jarg1_, long jarg2);

	public final static native long dffa_transitions_get(long jarg1, dffa jarg1_);

	public final static native void dffa_transition_freqs_set(long jarg1, dffa jarg1_, long jarg2);

	public final static native long dffa_transition_freqs_get(long jarg1, dffa jarg1_);

	public final static native void dffa_final_freqs_set(long jarg1, dffa jarg1_, long jarg2);

	public final static native long dffa_final_freqs_get(long jarg1, dffa jarg1_);

	public final static native void dffa_total_freqs_set(long jarg1, dffa jarg1_, long jarg2);

	public final static native long dffa_total_freqs_get(long jarg1, dffa jarg1_);

	public final static native long new_dffa();

	public final static native void delete_dffa(long jarg1);

	public final static native long dffa_to_wfsa(long jarg1, dffa jarg1_);

	public final static native long dffa_state_merge(long jarg1, observations jarg1_, double jarg2, int jarg3,
			int jarg4);

	public final static native long dffa_mdi(long jarg1, observations jarg1_, double jarg2);

	public final static native long observations_to_dffa(long jarg1, observations jarg1_);

	public final static native long dffa_init(int jarg1, int jarg2);

	public final static native int dffa_chi2_test(long jarg1, dffa jarg1_, int jarg2, int jarg3, double jarg4);

	public final static native void log1plus_taylor_init_wrapper();

	public final static native void log1plus_init_wrapper();

	public final static native void log1plus_free_wrapper();

	public final static native void setPrior(double jarg1);

	public final static native void setT0(int jarg1);
}