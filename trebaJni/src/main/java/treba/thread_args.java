/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package treba;

public class thread_args {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected thread_args(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(thread_args obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        trebaJNI.delete_thread_args(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setTrellis(trellis value) {
    trebaJNI.thread_args_trellis_set(swigCPtr, this, trellis.getCPtr(value), value);
  }

  public trellis getTrellis() {
    long cPtr = trebaJNI.thread_args_trellis_get(swigCPtr, this);
    return (cPtr == 0) ? null : new trellis(cPtr, false);
  }

  public void setObsarray(SWIGTYPE_p_p_observations value) {
    trebaJNI.thread_args_obsarray_set(swigCPtr, this, SWIGTYPE_p_p_observations.getCPtr(value));
  }

  public SWIGTYPE_p_p_observations getObsarray() {
    long cPtr = trebaJNI.thread_args_obsarray_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_observations(cPtr, false);
  }

  public void setMinobs(int value) {
    trebaJNI.thread_args_minobs_set(swigCPtr, this, value);
  }

  public int getMinobs() {
    return trebaJNI.thread_args_minobs_get(swigCPtr, this);
  }

  public void setMaxobs(int value) {
    trebaJNI.thread_args_maxobs_set(swigCPtr, this, value);
  }

  public int getMaxobs() {
    return trebaJNI.thread_args_maxobs_get(swigCPtr, this);
  }

  public void setFsmhmm(SWIGTYPE_p_void value) {
    trebaJNI.thread_args_fsmhmm_set(swigCPtr, this, SWIGTYPE_p_void.getCPtr(value));
  }

  public SWIGTYPE_p_void getFsmhmm() {
    long cPtr = trebaJNI.thread_args_fsmhmm_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void setBeta(double value) {
    trebaJNI.thread_args_beta_set(swigCPtr, this, value);
  }

  public double getBeta() {
    return trebaJNI.thread_args_beta_get(swigCPtr, this);
  }

  public thread_args() {
    this(trebaJNI.new_thread_args(), true);
  }

}
